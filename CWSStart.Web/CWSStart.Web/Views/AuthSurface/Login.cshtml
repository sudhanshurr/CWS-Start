@using System.Web.Mvc
@using System.Web.Mvc.Html
@using Umbraco.Web
@using CWSStart.Web.Controllers
@using CWSStart.Web.Models
@using CWSStart.Web.CWSExtensions;
@model LoginViewModel

@{
    Html.EnableClientValidation(true);
    Html.EnableUnobtrusiveJavaScript(true);
}

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        <h4>@DictionaryHelper.GetDictItem("ForgottenPassword","Forgotten your password?")</h4>
        <p>
            @Html.Raw(DictionaryHelper.GetDictItem("ForgottenPasswordDescription","Don't worry we all forget our passwords from time to time and <a href='/forgotten-password' class='alert-link'>may need a reminder</a>."))
        </p>
    
        @foreach (ModelState modelState in ViewData.ModelState.Values)
        {
            var errors = modelState.Errors;

            if (errors.Any())
            { 
                <ul>
                    @foreach(ModelError error in errors)
                    {
                        <li>@error.ErrorMessage</li>
                    }
                </ul>
            }
        }
    </div>
}


@using(Html.BeginUmbracoForm<AuthSurfaceController>("HandleLogin"))
{
    @Html.AntiForgeryToken()

    <fieldset>
        <div class="form-group">
            @Html.LabelFor(model => model.EmailAddress, DictionaryHelper.GetDictItem("LabelEmailAddress","Email address"), new { @class = "control-label"})
            @Html.TextBoxFor(model => model.EmailAddress, new{ @class = "form-control", placeholder = DictionaryHelper.GetDictItem("PlaceHolderEmailAddress","Email Address") })
            @Html.ValidationMessageFor(model => model.EmailAddress, string.Empty, new { @class= "help-block" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Password, DictionaryHelper.GetDictItem("LabelPassword","Password"), new { @class = "control-label"})
            @Html.PasswordFor(model => model.Password, new{ @class = "form-control", placeholder = DictionaryHelper.GetDictItem("PlaceHolderPassword","Password") })
            @Html.ValidationMessageFor(model => model.Password, string.Empty, new { @class= "help-block" })
        </div>
        
        @Html.HiddenFor(Model => Model.ReturnUrl)
        
        <button type="submit" class="btn btn-default">@DictionaryHelper.GetDictItem("ButtonLogin","Login")</button>

    </fieldset>
}